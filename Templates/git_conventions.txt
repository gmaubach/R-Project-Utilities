# Convetions using git

# The seven rules of a great git commit message (1)
# 
# 1. Separate subject from body with a blank line
# 2. Limit the subject line to 50 characters
# 3. Capitalize the subject line
# 4. Do not end the subject line with a period
# 5. Use the imperative mood in the subject line
# 6. Wrap the body at 72 characters
# 7. Use the body to explain what and why vs. how

# ad 5:
# The subject line should follow the following sentence:
# If applied, this commit will "your subject line here".

#--------1---------2---------3---------4---------5

# Example

# -- cut --

# Summarize changes in around 50 characters or less
# 
# More detailed explanatory text, if necessary. Wrap it to about 72
# characters or so. In some contexts, the first line is treated as the
# subject of the commit and the rest of the text as the body. The
# blank line separating the summary from the body is critical (unless
# you omit the body entirely); various tools like `log`, `shortlog`
# and `rebase` can get confused if you run the two together.
# 
# Explain the problem that this commit is solving. Focus on why you
# are making this change as opposed to how (the code explains that).
# Are there side effects or other unintuitive consequenses of this
# change? Here's the place to explain them.
# 
# Further paragraphs come after blank lines.
# 
#  - Bullet points are okay, too
# 
#  - Typically a hyphen or asterisk is used for the bullet, preceded
#    by a single space, with blank lines in between, but conventions
#    vary here
# 
# If you use an issue tracker, put references to them at the bottom,
# like this:
# 
# Resolves: #123
# See also: #456, #789

# -- cut --

# Every commit should be succinct, atomic, and have a well documented
# commit message (3).
# 
# Use atomic approach for commits (2):
# 1. Commit each fix or task as a separate change
# 2. Only commit when a block of work is complete
# 3. Commit each layout change separately
# 4. Joint commit for layout file, code behind file, and additional
#    resources

# Use public and private branches (3):
# 1. Public branches are master and release branches.
#    Treat public history as immutable, atomic, and easy to follow.
# 2. Private branches are for yourself and act as scratch paper while
#    working out a problem. Private branches are kept locally.
#    Treat private history as disposable and malleable.

# Stick to the following workflow (3):
# 1. Create a private branch off a public branch.
# 2. Regularly commit your work to this private branch.
# 3. Once your code is perfect, clean up its history.
# 4. Merge the cleaned-up branch back into the public branch.


# Source:
# (1) http://chris.beams.io/posts/git-commit/
# (2) http://www.freshconsulting.com/atomic-commits/
# (3) https://sandofsky.com/blog/git-workflow.html

# EOF

