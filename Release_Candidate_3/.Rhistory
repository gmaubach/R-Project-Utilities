xlsx_workbook = v_xlsx,
sheetname = "Cleaning Statistics",
row_names = FALSE,
col_names = TRUE,
start_position = list(
row = position[["row"]] + 1,
col = start_position[["col"]]),
border_line = TRUE)
t_write_xlsx(
workbook = v_xlsx,
path = c_path_full$export,
filename = "Cleaning_Statistics_Customers.xlsx",
overwrite = TRUE)
#-----------------------------------------------------------
# Project     : Abwanderer 4
# Organisation: Wein Wolf Import GmbH & Co. Verwaltungs KG
# Department  : Sales
# Author      : Georg Maubach
# Contributors: n/a
# Date        : 2017-01-09
# Update      : 2017-01-09
#
# Copyright (C) 2016,
#     Wein Wolf Import GmbH & Co. Verwaltngs KG
# All rights reserved.
#-----------------------------------------------------------
cat("===================================================\n")
cat("#= [ Module ]: 310_Clean_Kundenstammdaten.R\n")
cat("===================================================\n")
cat("#= [ Libraries ] ==================================\n")
library(dplyr)
library(openxlsx)
cat("#= [ Declarations ] ===============================\n")
cat("#- [ Constants ] ----------------------------------\n")
c_filename_input <- "customers.RData"
c_filename_output <- "customers_clean.RData"
cat("#- [ Modules ] ------------------------------------\n")
load(
file = file.path(
c_path_project,
"program",
"project_config.RData"))
for (file in list.files(
path = c_path_full$modules,
pattern = "^t_"))
{
source(file = file.path(
c_path_full$modules,
file),
echo = TRUE)
}
cat("#= [ BEGIN ] ======================================\n")
cat("#  [ At first ] -----------------------------------\n")
v_xlsx <- t_create_workbook()
openxlsx::addWorksheet(
wb = v_xlsx,
sheetName = "Cleaning Statistics")
start_position = list(row = 2, col = 2)
cat("#  [ Input ] --------------------------------------\n")
cat("Load dataset ...\n")
load(
file = file.path(
c_path_full$output,
c_filename_input))
cat('#  [ Processing ] ---------------------------------\n')
cat("#  [ Inspect ] ....................................\n")
cat("Inspect dataset 'SAP-ERP_ZWW-Kunden.RData' ...\n")
t_inspect_dataset(
dataset = d_customers,
file = "SAP-ERP_ZWW_Kunden_Inspection")
#-----------------------------------------------------------
cat("#  [ Clean ] ......................................\n")
#-----------------------------------------------------------
cat("Clean variables .......... \n")
#-----------------------------------------------------------
cat("Delete empty variables ... \n")
#-----------------------------------------------------------
d_customers <- t_delete_empty_variables(
dataset = d_customers)
cat("Keep only needed variables ... \n")
d_customers <- d_customers[ , c(
'Debitor',
'Kundenname',
'Ort',
'Auftragssperre_Z',
'Auftragssperre_V',
'Liefersperre_Z',
'Liefersperre_V',
'Kontengruppe',
'Branche',
'Angelegt_am',
'Verkaufsorganisation',
'Vertriebsweg',
'Handelsvertreter_Nr')]
#-----------------------------------------------------------
cat("Clean cases .......... \n")
#-----------------------------------------------------------
#-----------------------------------------------------------
cat("Clean 'Debitor' based on debitor 'type' ... \n")
#-----------------------------------------------------------
# Type is determined by first character of Debitor ID
#
# Start  Customer Type
# 1..9 = Kunde
# A    = Warenempfaenger
# H    = Handelsagentur
# G    = Gebietsnummer
# L    = Zentralabrechner (more info with Ralf Hoeck)
# Exclude Debitor with A, H, G, L at the beginning of
# Debitor ID.
#-----------------------------------------------------------
# Print Debitor Type
v_debitor_type <- substring(
d_customers$Debitor,
first = 1,
last = 1)
d_table_1 <- table(v_debitor_type)
print(d_table_1)
# Make rownames and ID column for matching
d_table_1 <- cbind(
id = row.names(d_table_1),
d_table_1)
# Flag all debitors to exclude because of its debitor type
v_debitor_flag <- v_debitor_type %in%
toupper(c("a", "h", "g", "l"))
table(v_debitor_flag, useNA = "always")
print(paste("Cases before cleaning:", nrow(d_customers)))
d_customers <-
d_customers[!v_debitor_flag, ]  # exclude non-customers
print(paste("Cases after cleaning:", nrow(d_customers)))
# Print Debitor Type
v_debitor_type <- substring(
d_customers$Debitor,
first = 1,
last = 1)
d_table_2 <- table(v_debitor_type)
print(d_table_2)
# Make rownames and ID column for matching
d_table_2 <- cbind(
id = row.names(d_table_2),
d_table_2)
# Match tables before and after cleaning
d_table <- merge(
x = d_table_1,
y = d_table_2,
by.x = "id",
by.y = "id",
all.x = TRUE,
all.y = FALSE)
position <- t_export_table_2_xlsx(
table = as.data.frame(c("Debitor Type")),
xlsx_workbook = v_xlsx,
sheetname = "Cleaning Statistics",
row_names = FALSE,
col_names = FALSE,
start_position = start_position,
border_line = FALSE
)
position <- t_export_table_2_xlsx(
table = d_table,
xlsx_workbook = v_xlsx,
sheetname = "Cleaning Statistics",
row_names = FALSE,
col_names = TRUE,
start_position = list(
row = position[["row"]] + 1,
col = start_position[["col"]]),
border_line = TRUE)
t_write_xlsx(
workbook = v_xlsx,
path = c_path_full$export,
filename = "Cleaning_Statistics_Customers.xlsx",
overwrite = TRUE)
str(d_table)
d_table
d_table <- merge(
x = d_table_1,
y = d_table_2,
by.x = row.names(d_table_1),
by.y = row.names(d_table_2),
all.x = TRUE,
all.y = FALSE)
d_table <- merge(
x = d_table_1,
y = d_table_2,
by.x = "id",
by.y = "id",
all.x = TRUE,
all.y = FALSE)
names(d_table) <- c("id", "before", "after")
#-----------------------------------------------------------
# Project     : Abwanderer 4
# Organisation: Wein Wolf Import GmbH & Co. Verwaltungs KG
# Department  : Sales
# Author      : Georg Maubach
# Contributors: n/a
# Date        : 2017-01-09
# Update      : 2017-01-09
#
# Copyright (C) 2016,
#     Wein Wolf Import GmbH & Co. Verwaltngs KG
# All rights reserved.
#-----------------------------------------------------------
cat("===================================================\n")
cat("#= [ Module ]: 310_Clean_Kundenstammdaten.R\n")
cat("===================================================\n")
cat("#= [ Libraries ] ==================================\n")
library(dplyr)
library(openxlsx)
cat("#= [ Declarations ] ===============================\n")
cat("#- [ Constants ] ----------------------------------\n")
c_filename_input <- "customers.RData"
c_filename_output <- "customers_clean.RData"
cat("#- [ Modules ] ------------------------------------\n")
load(
file = file.path(
c_path_project,
"program",
"project_config.RData"))
for (file in list.files(
path = c_path_full$modules,
pattern = "^t_"))
{
source(file = file.path(
c_path_full$modules,
file),
echo = TRUE)
}
cat("#= [ BEGIN ] ======================================\n")
cat("#  [ At first ] -----------------------------------\n")
v_xlsx <- t_create_workbook()
openxlsx::addWorksheet(
wb = v_xlsx,
sheetName = "Cleaning Statistics")
start_position = list(row = 2, col = 2)
cat("#  [ Input ] --------------------------------------\n")
cat("Load dataset ...\n")
load(
file = file.path(
c_path_full$output,
c_filename_input))
cat('#  [ Processing ] ---------------------------------\n')
cat("#  [ Inspect ] ....................................\n")
cat("Inspect dataset 'SAP-ERP_ZWW-Kunden.RData' ...\n")
t_inspect_dataset(
dataset = d_customers,
file = "SAP-ERP_ZWW_Kunden_Inspection")
#-----------------------------------------------------------
cat("#  [ Clean ] ......................................\n")
#-----------------------------------------------------------
cat("Clean variables .......... \n")
#-----------------------------------------------------------
cat("Delete empty variables ... \n")
#-----------------------------------------------------------
d_customers <- t_delete_empty_variables(
dataset = d_customers)
cat("Keep only needed variables ... \n")
d_customers <- d_customers[ , c(
'Debitor',
'Kundenname',
'Ort',
'Auftragssperre_Z',
'Auftragssperre_V',
'Liefersperre_Z',
'Liefersperre_V',
'Kontengruppe',
'Branche',
'Angelegt_am',
'Verkaufsorganisation',
'Vertriebsweg',
'Handelsvertreter_Nr')]
#-----------------------------------------------------------
cat("Clean cases .......... \n")
#-----------------------------------------------------------
#-----------------------------------------------------------
cat("Clean 'Debitor' based on debitor 'type' ... \n")
#-----------------------------------------------------------
# Type is determined by first character of Debitor ID
#
# Start  Customer Type
# 1..9 = Kunde
# A    = Warenempfaenger
# H    = Handelsagentur
# G    = Gebietsnummer
# L    = Zentralabrechner (more info with Ralf Hoeck)
# Exclude Debitor with A, H, G, L at the beginning of
# Debitor ID.
#-----------------------------------------------------------
# Print Debitor Type
v_debitor_type <- substring(
d_customers$Debitor,
first = 1,
last = 1)
d_table_1 <- table(v_debitor_type)
print(d_table_1)
# Make rownames and ID column for matching
d_table_1 <- cbind(
id = row.names(d_table_1),
d_table_1)
# Flag all debitors to exclude because of its debitor type
v_debitor_flag <- v_debitor_type %in%
toupper(c("a", "h", "g", "l"))
table(v_debitor_flag, useNA = "always")
print(paste("Cases before cleaning:", nrow(d_customers)))
d_customers <-
d_customers[!v_debitor_flag, ]  # exclude non-customers
print(paste("Cases after cleaning:", nrow(d_customers)))
# Print Debitor Type
v_debitor_type <- substring(
d_customers$Debitor,
first = 1,
last = 1)
d_table_2 <- table(v_debitor_type)
print(d_table_2)
# Make rownames and ID column for matching
d_table_2 <- cbind(
id = row.names(d_table_2),
d_table_2)
# Match tables before and after cleaning
d_table <- merge(
x = d_table_1,
y = d_table_2,
by.x = "id",
by.y = "id",
all.x = TRUE,
all.y = FALSE)
names(d_table) <- c("id", "before", "after")
position <- t_export_table_2_xlsx(
table = as.data.frame(c("Debitor Type")),
xlsx_workbook = v_xlsx,
sheetname = "Cleaning Statistics",
row_names = FALSE,
col_names = FALSE,
start_position = start_position,
border_line = FALSE
)
position <- t_export_table_2_xlsx(
table = d_table,
xlsx_workbook = v_xlsx,
sheetname = "Cleaning Statistics",
row_names = FALSE,
col_names = TRUE,
start_position = list(
row = position[["row"]] + 1,
col = start_position[["col"]]),
border_line = TRUE)
t_write_xlsx(
workbook = v_xlsx,
path = c_path_full$export,
filename = "Cleaning_Statistics_Customers.xlsx",
overwrite = TRUE)
#-----------------------------------------------------------
# Project     : Abwanderer 4
# Organisation: Wein Wolf Import GmbH & Co. Verwaltungs KG
# Department  : Sales
# Author      : Georg Maubach
# Contributors: n/a
# Date        : 2017-01-09
# Update      : 2017-01-09
#
# Copyright (C) 2016,
#     Wein Wolf Import GmbH & Co. Verwaltngs KG
# All rights reserved.
#-----------------------------------------------------------
cat("===================================================\n")
cat("#= [ Module ]: 310_Clean_Kundenstammdaten.R\n")
cat("===================================================\n")
cat("#= [ Libraries ] ==================================\n")
library(dplyr)
library(openxlsx)
cat("#= [ Declarations ] ===============================\n")
cat("#- [ Constants ] ----------------------------------\n")
c_filename_input <- "customers.RData"
c_filename_output <- "customers_clean.RData"
cat("#- [ Modules ] ------------------------------------\n")
load(
file = file.path(
c_path_project,
"program",
"project_config.RData"))
for (file in list.files(
path = c_path_full$modules,
pattern = "^t_"))
{
source(file = file.path(
c_path_full$modules,
file),
echo = TRUE)
}
cat("#= [ BEGIN ] ======================================\n")
cat("#  [ At first ] -----------------------------------\n")
v_xlsx <- t_create_workbook()
openxlsx::addWorksheet(
wb = v_xlsx,
sheetName = "Cleaning_Statistics")
start_position = list(row = 2, col = 2)
cat("#  [ Input ] --------------------------------------\n")
cat("Load dataset ...\n")
load(
file = file.path(
c_path_full$output,
c_filename_input))
cat('#  [ Processing ] ---------------------------------\n')
cat("#  [ Inspect ] ....................................\n")
cat("Inspect dataset 'SAP-ERP_ZWW-Kunden.RData' ...\n")
t_inspect_dataset(
dataset = d_customers,
file = "SAP-ERP_ZWW_Kunden_Inspection")
#-----------------------------------------------------------
cat("#  [ Clean ] ......................................\n")
#-----------------------------------------------------------
cat("Clean variables .......... \n")
#-----------------------------------------------------------
cat("Delete empty variables ... \n")
#-----------------------------------------------------------
d_customers <- t_delete_empty_variables(
dataset = d_customers)
cat("Keep only needed variables ... \n")
d_customers <- d_customers[ , c(
'Debitor',
'Kundenname',
'Ort',
'Auftragssperre_Z',
'Auftragssperre_V',
'Liefersperre_Z',
'Liefersperre_V',
'Kontengruppe',
'Branche',
'Angelegt_am',
'Verkaufsorganisation',
'Vertriebsweg',
'Handelsvertreter_Nr')]
#-----------------------------------------------------------
cat("Clean cases .......... \n")
#-----------------------------------------------------------
#-----------------------------------------------------------
cat("Clean 'Debitor' based on debitor 'type' ... \n")
#-----------------------------------------------------------
# Type is determined by first character of Debitor ID
#
# Start  Customer Type
# 1..9 = Kunde
# A    = Warenempfaenger
# H    = Handelsagentur
# G    = Gebietsnummer
# L    = Zentralabrechner (more info with Ralf Hoeck)
# Exclude Debitor with A, H, G, L at the beginning of
# Debitor ID.
#-----------------------------------------------------------
# Print Debitor Type
v_debitor_type <- substring(
d_customers$Debitor,
first = 1,
last = 1)
d_table_1 <- table(v_debitor_type)
print(d_table_1)
# Make rownames and ID column for matching
d_table_1 <- cbind(
id = row.names(d_table_1),
d_table_1)
# Flag all debitors to exclude because of its debitor type
v_debitor_flag <- v_debitor_type %in%
toupper(c("a", "h", "g", "l"))
table(v_debitor_flag, useNA = "always")
print(paste("Cases before cleaning:", nrow(d_customers)))
d_customers <-
d_customers[!v_debitor_flag, ]  # exclude non-customers
print(paste("Cases after cleaning:", nrow(d_customers)))
# Print Debitor Type
v_debitor_type <- substring(
d_customers$Debitor,
first = 1,
last = 1)
d_table_2 <- table(v_debitor_type)
print(d_table_2)
# Make rownames and ID column for matching
d_table_2 <- cbind(
id = row.names(d_table_2),
d_table_2)
# Match tables before and after cleaning
d_table <- merge(
x = d_table_1,
y = d_table_2,
by.x = "id",
by.y = "id",
all.x = TRUE,
all.y = FALSE)
names(d_table) <- c("id", "before", "after")
position <- t_export_table_2_xlsx(
table = as.data.frame(c("Debitor Type")),
xlsx_workbook = v_xlsx,
sheetname = "Cleaning_Statistics",
row_names = FALSE,
col_names = FALSE,
start_position = start_position,
border_line = FALSE
)
position <- t_export_table_2_xlsx(
table = d_table,
xlsx_workbook = v_xlsx,
sheetname = "Cleaning_Statistics",
row_names = FALSE,
col_names = TRUE,
start_position = list(
row = position[["row"]] + 1,
col = start_position[["col"]]),
border_line = TRUE)
t_write_xlsx(
workbook = v_xlsx,
path = c_path_full$export,
filename = "Cleaning_Statistics_Customers.xlsx",
overwrite = TRUE)
